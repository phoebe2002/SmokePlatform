using System;

public class Class1
{
	public Class1()
	{
        //ALGORITHMS FOR FOURTH TASK

        public static T Find<T>(ICollection<T> collection, Func<T, bool> predicate, bool searchFromStart = true)
        {
            if (searchFromStart)
            {
                foreach (T obj in collection)
                {
                    if (predicate(obj))
                    {
                        return obj;
                    }
                }
            }
            else
            {
                for (int i = collection.Count - 1; i >= 0; i--)
                {
                    T obj = (T)collection.ElementAt(i);
                    if (predicate(obj))
                    {
                        return obj;
                    }
                }
            }
            return default(T);
        }


        public static void Print<T>(ICollection<T> collection, Func<T, bool> predicate, bool searchFromStart = true)
        {
            if (searchFromStart)
            {
                foreach (T obj in collection)
                {
                    if (predicate(obj))
                    {
                        Console.WriteLine(obj);
                    }
                }
            }
            else
            {
                for (int i = collection.Count - 1; i >= 0; i--)
                {
                    T obj = (T)collection.ElementAt(i);
                    if (predicate(obj))
                    {
                        Console.WriteLine(obj);
                    }
                }
            }
        }


        /*--------------------------------------FIFTH TASK --------------------------------------------------*/

        using System;
        using System.Collections;
        using System.Collections.Generic;

public class DoublyLinkedList<T> : IEnumerable<T>
    {
        private Node head;
        private Node tail;
        private int count;

        public void PushFront(T value)
        {
            if (head == null)
            {
                head = new Node();
                tail = head;
            }
            else if (head.Values.Count == 10)
            {
                var newNode = new Node();
                newNode.Next = head;
                head.Prev = newNode;
                head = newNode;
            }
            head.Values.Insert(0, value);
            count++;
        }

        public void PushBack(T value)
        {
            if (tail == null)
            {
                tail = new Node();
                head = tail;
            }
            else if (tail.Values.Count == 10)
            {
                var newNode = new Node();
                newNode.Prev = tail;
                tail.Next = newNode;
                tail = newNode;
            }
            tail.Values.Add(value);
            count++;
        }

        public T PopFront()
        {
            if (head == null) throw new InvalidOperationException("List is empty");

            var value = head.Values[0];
            head.Values.RemoveAt(0);
            count--;

            if (head.Values.Count == 0)
            {
                head = head.Next;
                if (head != null) head.Prev = null;
                else tail = null;
            }

            return value;
        }

        public T PopBack()
        {
            if (tail == null) throw new InvalidOperationException("List is empty");

            var value = tail.Values[tail.Values.Count - 1];
            tail.Values.RemoveAt(tail.Values.Count - 1);
            count--;

            if (tail.Values.Count == 0)
            {
                tail = tail.Prev;
                if (tail != null) tail.Next = null;
                else head = null;
            }

            return value;
        }

        public int Count => count;

        public IEnumerator<T> GetEnumerator()
        {
            var current = head;
            while (current != null)
            {
                foreach (var value in current.Values)
                {
                    yield return value;
                }
                current = current.Next;
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        private class Node
        {
            public List<T> Values { get; } = new List<T>();
            public Node Next { get; set; }
            public Node Prev { get; set; }
        }
    }


    using System;
using System.Collections;
using System.Collections.Generic;

public class SortedArray<T>
{
    private List<T> array;
    private Comparison<T> comparator;

    public SortedArray(Comparison<T> comparator)
    {
        this.array = new List<T>();
        this.comparator = comparator;
    }

    public void Insert(T element)
    {
        int index = array.BinarySearch(element, new ComparisonComparer<T>(comparator));
        if (index < 0) index = ~index;
        array.Insert(index, element);
    }

    public bool Remove(T element)
    {
        int index = array.BinarySearch(element, new ComparisonComparer<T>(comparator));
        if (index < 0) return false;
        array.RemoveAt(index);
        return true;
    }

    public T Find(Func<T, bool> predicate)
    {
        int index = array.FindIndex(predicate);
        return index >= 0 ? array[index] : default(T);
    }

    public IEnumerator<T> GetEnumerator()
    {
        return array.GetEnumerator();
    }

    class ComparisonComparer<U> : IComparer<U>
    {
        private Comparison<U> comparison;

        public ComparisonComparer(Comparison<U> comparison)
        {
            this.comparison = comparison;
        }

        public int Compare(U x, U y)
        {
            return comparison(x, y);
        }
    }
}
//in the above implementaion, the following is happening

//In this implementation, the SortedArray class uses a List<T> to store the elements, and a Comparison<T>
//delegate to compare them. The Insert method uses the BinarySearch method of the List<T> class to find the index
//where the new element should be inserted, and then inserts it at that position. The Remove method uses the same
//method to find the index of the element to remove, and then removes it if found. The Find method uses the FindIndex
//method of the List<T> class to find the index of the first element for which the given predicate returns true, and
//then returns that element if found. Finally, the GetEnumerator method returns an enumerator for the List<T>.

//Note that the ComparisonComparer class is used to convert a Comparison<T> delegate to an IComparer<T> instance,
//which is needed by the BinarySearch method.This is a common pattern in C# when you need to use a delegate to implement
//an interface or pass a method as a parameter.



//below we have the specific algorithms
public interface ICollection<T>
{
    void Add(T item);
    void Remove(T item);
    IEnumerator<T> GetEnumerator();
}

public static class CollectionAlgorithms
{
    public static T Find<T>(IEnumerator<T> iterator, Func<T, bool> predicate) where T : class
    {
        while (iterator.MoveNext())
        {
            T item = iterator.Current;
            if (predicate(item))
            {
                return item;
            }
        }
        return null;
    }

    public static void ForEach<T>(IEnumerator<T> iterator, Action<T> action)
    {
        while (iterator.MoveNext())
        {
            T item = iterator.Current;
            action(item);
        }
    }

    public static int CountIf<T>(IEnumerator<T> iterator, Func<T, bool> predicate)
    {
        int count = 0;
        while (iterator.MoveNext())
        {
            T item = iterator.Current;
            if (predicate(item))
            {
                count++;
            }
        }
        return count;
    }
}
//additions
//Sure, I can help you with that! Here's an implementation of each of the three algorithms for a generic collection interface:

csharp
Copy code
public interface ICollection<T>
{
    void Add(T item);
    void Remove(T item);
    IEnumerator<T> GetEnumerator();
}

public static class CollectionAlgorithms
{
    public static T Find<T>(IEnumerator<T> iterator, Func<T, bool> predicate) where T : class
    {
        while (iterator.MoveNext())
        {
            T item = iterator.Current;
            if (predicate(item))
            {
                return item;
            }
        }
        return null;
    }

    public static void ForEach<T>(IEnumerator<T> iterator, Action<T> action)
    {
        while (iterator.MoveNext())
        {
            T item = iterator.Current;
            action(item);
        }
    }

    public static int CountIf<T>(IEnumerator<T> iterator, Func<T, bool> predicate)
    {
        int count = 0;
        while (iterator.MoveNext())
        {
            T item = iterator.Current;
            if (predicate(item))
            {
                count++;
            }
        }
        return count;
    }
}
//Note that these algorithms take an IEnumerator<T> as their first argument,
//which means that they will work with any collection that implements the IEnumerable<T> interface.
//If you want to use them with a specific collection class that you've implemented,
//you can simply call the GetEnumerator() method on your collection instance to get an IEnumerator<T> iterator.

}
}



OG class
using System;
using System.Data;
using System.Xml.Linq;
using static System.Net.Mime.MediaTypeNames;

namespace SmokePlatform
{
    public class Game
    {
        public string name { get; set; }
        public string genre { get; set; }
        public List<User> authors { get; set; }
        public List<Review> review { get; set; }
        public List<Mod> mods { get; set; }
        public string devices { get; set; }


        public Game(string _name = " ", string _genre = " ", List<User> _author = null, List<Review> _review = null, List<Mod> _mods = null, string _devices = " ")
        {
            name = _name;
            genre = _genre;
            authors = _author;
            review = _review;
            mods = _mods;
            devices = _devices;

        }
        public void Print_Game()
        {
            Console.WriteLine($"Name: {name}");
            Console.WriteLine($"Genre: {genre}");
            Console.WriteLine($"\nAuthors: ");
            foreach (User author in authors)
            {
                Console.WriteLine($"{author.nickname}");
            }
            Console.WriteLine("\nReviews");

            foreach (Review rev in review)
            {
                Console.WriteLine($"{rev.rating} by {rev.author.nickname}");
            }

            Console.WriteLine($"\nMods:");
            foreach (Mod mod in mods)
            {
                Console.WriteLine($"{mod.name}");
            }
            Console.WriteLine($"\nDevices: {devices} ");

            Console.WriteLine("\n");
        }
    }


    public class Review
    {
        public string text { get; set; }
        public int rating { get; set; }
        public User author { get; set; }

        public Review(string _text = " ", int _rating = 0, User _author = null)
        {
            text = _text; ;
            rating = _rating;
            author = _author;
        }


        public void Print_Review()
        {
            Console.WriteLine($"Author: {author.nickname}");
            Console.WriteLine($"Review: {text}");
            Console.WriteLine($"Rating: {rating}");
            Console.WriteLine("\n");
        }


    }

    public class Mod
    {
        public string name { get; set; }
        public string description { get; set; }
        public List<User> authors { get; set; }
        public List<Mod> compatability { get; set; }
        public Mod(string _name /*= " "*/, string _description /*= " "*/, List<User> _authors /*= null*/, List<Mod> _compatability /*= null */)
        {
            this.name = _name;
            this.description = _description;
            this.authors = _authors;
            this.compatability = _compatability;

        }

        public void Print_Mod()
        {
            Console.WriteLine($"Name: {name}");
            Console.WriteLine($"Description: {description}");
            Console.WriteLine($"\nAuthor/s:");
            foreach (User author in authors)
            {
                Console.WriteLine($"{author.nickname}");
            }
            Console.WriteLine("\nCompatability With:");
            foreach (Mod mod in compatability)
            {
                Console.WriteLine($"  {mod.name}");
            }
        }
    }

    public class User
    {
        public string nickname { get; set; }
        public List<Game> ownedGames { get; set; }

        public void Print_User()
        {
            Console.WriteLine($"\nNickname: {nickname}");
            Console.WriteLine("\nOwned Games:");
            foreach (Game game in ownedGames)
            {
                Console.WriteLine($"  {game.name} ");
            }
        }


        public User(string _nickname, List<Game> _ownedGames)
        {
            nickname = _nickname;
            ownedGames = _ownedGames;
        }

        public User()
        {
            this.nickname = null;
            this.ownedGames = new List<Game>();
        }
    }

    /* - ----------------------------------SECOND REPRESENTATION IDEAS - ----------------------------------*/

    public interface IGame
    {
        public void Print_Game();
    }

    public class Game2_Adaptor : IGame
    {
        private readonly Game game;
        private readonly List<Tuple<string, object>> tupleList;
        public Game2_Adaptor(Game game)
        {
            this.game = game;
            this.tupleList = new List<Tuple<string, object>>();

            tupleList.Add(Tuple.Create("name", (object)game.name));
            tupleList.Add(Tuple.Create("genre", (object)game.genre));
            tupleList.Add(Tuple.Create("authors", (object)game.authors));
            tupleList.Add(Tuple.Create("review", (object)game.review));
            tupleList.Add(Tuple.Create("mods", (object)game.mods));
            tupleList.Add(Tuple.Create("devices", (object)game.devices));
        }

        public void Print_Game()
        {
            game.Print_Game();
        }
    }


    public interface IReview
    {
        public void Print_Review();
    }

    public class Review2_adaptor : IReview
    {
        public readonly Review rev;
        private readonly List<Tuple<string, object>> tupleList;

        public Review2_adaptor(Review rev)
        {
            this.rev = rev;
            this.tupleList = new List<Tuple<string, object>>();
            tupleList.Add(Tuple.Create("text", (object)rev.text));
            tupleList.Add(Tuple.Create("rating", (object)rev.rating));
            tupleList.Add(Tuple.Create("author", (object)rev.author));

        }
        public void Print_Review()
        {
            rev.Print_Review();
        }
    }



    public interface IMod
    {
        public void Print_Mod();
    }

    public class Mod2_Adaptor : IMod
    {
        public readonly Mod mod;
        private readonly List<Tuple<string, object>> tupleList;

        public Mod2_Adaptor(Mod mod)
        {
            this.mod = mod;
            this.tupleList = new List<Tuple<string, object>>();
            tupleList.Add(Tuple.Create("name", (object)mod.name));
            tupleList.Add(Tuple.Create("descripion", (object)mod.description));
            tupleList.Add(Tuple.Create("authors", (object)mod.authors));
            tupleList.Add(Tuple.Create("compatability", (object)mod.compatability));


        }

        public void Print_Mod()
        {
            mod.Print_Mod();
        }

    }



    public interface IUser
    {
        public void Print_User();
    }

    public class User2_Adaptor : IUser
    {
        public readonly User user;
        private readonly List<Tuple<string, object>> tupleList;

        public User2_Adaptor(User user)
        {
            this.user = user;
            this.tupleList = new List<Tuple<string, object>>();
            tupleList.Add(Tuple.Create("nickname", (object)user.nickname));
            tupleList.Add(Tuple.Create("ownedGames", (object)user.ownedGames));

        }

        public void Print_User()
        {
            user.Print_User();
        }

    }

    /*-----------------------------------------THIRD REPRESENTATION------------------------------------------*/
    //work from here
    public class Game2
    {
        public int id { get; set; }
        public Dictionary<string, string> fields { get; }

        public Game2(int id, Dictionary<string, string> fields)
        {
            id = id;
            fields = fields;
        }

        //public void Print_Game()
        //{
        //    Console.WriteLine($"ID: {id}");
        //    Console.WriteLine($"Name: {fields["name"]}");
        //    Console.WriteLine($"Genre: {fields["genre"]}");
        //    Console.WriteLine($"\nAuthors: ");
        //    string[] authorIds = fields["authors"].Split(',');
        //    foreach (string authorId in authorIds)
        //    {
        //        User author = userList[int.Parse(authorId)];
        //        Console.WriteLine($"{author.nickname}");
        //    }
        //    Console.WriteLine("\nReviews");
        //    string[] reviewKeys = fields["reviews"].Split(',');
        //    foreach (string reviewKey in reviewKeys)
        //    {
        //        Review rev = reviewMap[reviewKey];
        //        Console.WriteLine($"{rev.rating} by {rev.author.nickname}");
        //    }
        //    Console.WriteLine($"\nMods:");
        //    string[] modKeys = fields["mods"].Split(',');
        //    foreach (string modKey in modKeys)
        //    {
        //        Mod mod = modMap[modKey];
        //        Console.WriteLine($"{mod.name}");
        //    }
        //    Console.WriteLine($"\nDevices: {fields["devices"]}");

        //    Console.WriteLine("\n");
        //}
   

}

    public class User2
    {
        public int id { get; set; }
        public Dictionary<string, string> Map { get;}

        public User2(int id, Dictionary<string, string> Map)
        {
            id = id;
            Map = Map;
        }
    }

    public class Review2
    {
        public int id { get; set; }
        public Dictionary<string, string> Map { get; }

        public Review2(int id, Dictionary<string, string> Map)
        {
            id = id;
            Map = Map;
        }
    }

    public class Mod2
    {
        public int id { get; set; }
        public Dictionary<string, string> Map { get; }

        public Mod2(int id, Dictionary<string, string> Map)
        {
            id = id;
            Map = Map;
        }
    }

    /*----------------------------------------------FOURTH TASK -------------------------------------------------------*/
    //Create two collections of the same interface:
    // - doubly linked list,
    // - vector(similar to c# list and c++ std::vector)
    //Each collection should allow:
    // - adding objects regardless of their representation,
    // - deleting objects regardless of their representation,
    // - getting forward and reverse iterator.

    // Define the interface for the collections
    public interface ICollection<T>
    {
        void Add(T item);
        bool Remove(T item);
       // void Clear();//?
       // int Count { get; }//?
        IEnumerator<T> GetEnumerator();
        IEnumerator<T> GetReverseEnumerator();
    }

    public class ListNode<T>
    {
        public T Value { get; set; }
        public ListNode<T> Prev { get; set; }
        public ListNode<T> Next { get; set; }

        public ListNode(T value)
        {
            Value = value;
            Prev = null;
            Next = null;
        }
    }

    public class DoublyLinkedList<T> : ICollection<T>
    {
        private ListNode<T> head;
        private ListNode<T> tail;
        private int count;

        public DoublyLinkedList()
        {
            head = null;
            tail = null;
            count = 0;
        }

        public void Add(T item)
        {
            ListNode<T> newNode = new ListNode<T>(item);

            if (head == null)
            {
                head = newNode;
                tail = newNode;
            }
            else
            {
                tail.Next = newNode;
                newNode.Prev = tail;
                tail = newNode;
            }

            count++;
        }

        public bool Remove(T item)
        {
            ListNode<T> current = head;

            while (current != null)
            {
                if (current.Value.Equals(item))
                {
                    if (current.Prev == null)
                    {
                        head = current.Next;
                    }
                    else
                    {
                        current.Prev.Next = current.Next;
                    }

                    if (current.Next == null)
                    {
                        tail = current.Prev;
                    }
                    else
                    {
                        current.Next.Prev = current.Prev;
                    }

                    count--;
                    return true;
                }

                current = current.Next;
            }

            return false;
        }

        public void Clear()
        {
            head = null;
            tail = null;
            count = 0;
        }

        public IEnumerator<T> GetEnumerator()
        {
            ListNode<T> current = head;
            while (current != null)
            {
                yield return current.Value;
                current = current.Next;
            }
        }

        public IEnumerator<T> GetReverseEnumerator()
        {
            ListNode<T> current = tail;
            while (current != null)
            {
                yield return current.Value;
                current = current.Prev;
            }
        }
    }




    public interface ILinkedList<T> : ICollection<T>
    {
        void AddFirst(T item);
        void AddLast(T item);
        void RemoveFirst();
        void RemoveLast();
        T First { get; }
        T Last { get; }
    }

    public interface IVector<T> : ICollection<T>
    {
        T this[int index] { get; set; }
        void Insert(int index, T item);
        void RemoveAt(int index);
    }



        /* -----------------------------------------  TASK FIVE ------------------------------------------------------------ */





    }




